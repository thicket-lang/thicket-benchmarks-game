/*
 * Thicket
 * https://github.com/d-plaindoux/thicket
 *
 * Copyright (c) 2015-2016 Didier Plaindoux
 * Licensed under the LGPL2 license.
 */
 
module Benchmarks.BinaryTree

from Lang.Range import foreach
from Lang.Do import do
from Lang.When import when

from Data.Pair import Pair
from Data.Number import number,number2string
from Data.String import string
from Data.Unit import unit
from Data.Option import some,none,option

from Standard.Math import math

from System.Console import console

/** 
 * Definition
 */
 
model TreeNode {
    item  : number
    nodes : option[(TreeNode,TreeNode)]
}

/** 
 * TreeNode Factory
 */
 
def bottomUpTree : number -> number -> TreeNode = item depth -> {
    let mkBottomUpTree = n -> bottomUpTree (2 * item - n) (depth - 1) in
        TreeNode item  $ depth ?> 0 fold
            { some ((mkBottomUpTree 1),(mkBottomUpTree 0)) }
            { none }
}

/**
 * itemcheck for TreeNode
 */

def itemCheck : TreeNode -> number = tree -> {
    tree.nodes fold 
        tree.item 
        (n -> tree.item + $ itemCheck n._1 - $ itemCheck n._2)
}

/** 
 * Main program
 */
 
def bench : number -> unit = n -> {
    let minDepth = 4 in
    let maxDepth = math.max (minDepth + 2) n in
    let stretchDepth = maxDepth + 1 in
    let check = itemCheck $ bottomUpTree 0 stretchDepth in
        do
        { console.log $ $"stretch tree of depth $stretchDepth check: $check"
        };
        { foreach minDepth,maxDepth step 2 fold
            ()
            (_ depth -> 
                let iterations = 1 << (maxDepth - depth + minDepth) in
                let check = 1 to iterations fold
                                    0 
                                    (r i -> r + 
                                        (itemCheck $ bottomUpTree i depth) +
                                        (itemCheck $ bottomUpTree (0 - i) depth)) in
                    do 
                    { console.log $ $"do $(iterations * 2) trees of depth check: $check"
                    }
                    return ())
        };
        {
            let check = itemCheck $ bottomUpTree 0 maxDepth in
                console.log $ $"long lived tree of depth $stretchDepth check: $check"
        }
        return ()
}

do {
    bench 8
}
return ()
